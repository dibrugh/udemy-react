{"version":3,"sources":["components/appHeader/AppHeader.js","services/MarvelService.js","resources/img/mjolnir.png","components/spinner/Spinner.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charItem/CharItem.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","resources/img/vision.png","components/errorBoundary.js/ErrorBoundary.js","components/app/App.js","index.js"],"names":["AppHeader","_jsxs","className","children","_jsx","href","MarvelService","_this","_classCallCheck","_apiBase","_apiKey","_baseOffset","getResource","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","url","res","wrap","_context","prev","next","fetch","sent","ok","Error","concat","status","json","abrupt","stop","_x","apply","arguments","getAllCharacters","_callee2","offset","_args2","_context2","length","undefined","data","results","map","_transformCharacter","getCharacter","_ref3","_callee3","id","_context3","_x2","char","name","description","slice","thumbnail","path","extension","homepage","urls","wiki","comics","items","Spinner","xmlns","viewBox","fill","stroke","d","attributeName","calcMode","dur","values","keySplines","repeatCount","ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","RandomChar","_Component","_inherits","_super","_createSuper","props","call","state","loading","error","marvelService","onCharLoaded","setState","onError","updateChar","Math","floor","random","onCharLoading","then","catch","_createClass","key","value","this","_this$state","errorMessage","spinner","content","View","onClick","mjolnir","Component","CharItem","imgStyle","item","onCharSelected","CharList","charList","newItemLoading","charEnded","componentDidMount","onRequest","onCharListLoading","onCharListLoaded","newCharList","ended","_toConsumableArray","_this2","disabled","Skeleton","_Fragment","CharInfo","_len","args","Array","_key","charId","prevProps","prevState","skeleton","i","ket","ErrorBoundary","errorInfo","App","selectedChar","decoration","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.efa6ef4e.chunk.js","sourcesContent":["import './appHeader.scss';\n\nconst AppHeader = () => {\n    return (\n        <header className=\"app__header\">\n            <h1 className=\"app__title\">\n                <a href=\"#\">\n                    <span>Marvel</span> information portal\n                </a>\n            </h1>\n            <nav className=\"app__menu\">\n                <ul>\n                    <li><a href=\"#\">Characters</a></li>\n                    /\n                    <li><a href=\"#\">Comics</a></li>\n                </ul>\n            </nav>\n        </header>\n    )\n}\n\nexport default AppHeader;","\r\n// Class на нативном JS, поэтому не нужно extends Component\r\nclass MarvelService {\r\n    // Формируем базовый путь и ключ\r\n    _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    _apiKey = 'apikey=f82fb1b4de23f8833770901066aedc4c';\r\n    // Базовый отступ персонажей\r\n    _baseOffset = 210;\r\n    // Создаём функцию, которая будет возвращать данные в формате JSON\r\n    getResource = async (url) => {\r\n        let res = await fetch(url);\r\n\r\n        if (!res.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${res.status}`);\r\n        }\r\n\r\n        return await res.json();\r\n    }\r\n\r\n    getAllCharacters = async (offset = this._baseOffset) => {\r\n        const res = await this.getResource(`${this._apiBase}characters?limit=9&offset=${offset}&${this._apiKey}`);\r\n        // Преобразовываем каждый элемент\r\n        return res.data.results.map(this._transformCharacter);\r\n    }\r\n\r\n    // Т.к getResource асинхронная\r\n    getCharacter = async (id) => {\r\n        const res = await this.getResource(`${this._apiBase}characters/${id}?${this._apiKey}`);\r\n        return this._transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    // Функция, которая формирует объект только с нужными данными для избежания дублирования кода в других компонентах\r\n    _transformCharacter = (char) => {\r\n        return {\r\n            id: char.id,\r\n            name: char.name,\r\n            description: char.description.length ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items,\r\n        }\r\n    }\r\n}\r\n\r\nexport default MarvelService;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import React from 'react'\r\n\r\nexport default function Spinner() {\r\n    return (\r\n        <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 300 150\"><path fill=\"none\" stroke=\"#FF0000\" stroke-width=\"15\" stroke-linecap=\"round\" stroke-dasharray=\"300 385\" stroke-dashoffset=\"0\" d=\"M275 75c0 31-27 50-50 50-58 0-92-100-150-100-28 0-50 22-50 50s23 50 50 50c58 0 92-100 150-100 24 0 50 19 50 50Z\"><animate attributeName=\"stroke-dashoffset\" calcMode=\"spline\" dur=\"2\" values=\"685;-685\" keySplines=\"0 0 1 1\" repeatCount=\"indefinite\"></animate></path></svg>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import React from 'react'\r\nimport img from './error.gif'\r\n\r\nexport default function ErrorMessage() {\r\n    return (\r\n        // Есть вариант обращения к статичному файлу в public {process.env.PUBLIC_URL + '/error.gif'}\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n","import './randomChar.scss';\r\nimport MarvelService from '../../services/MarvelService'\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport { Component } from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass RandomChar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    state = {\r\n        char: {},\r\n        loading: true,\r\n        error: false,\r\n    }\r\n\r\n    marvelService = new MarvelService();\r\n\r\n    // Если персонаж загрузился, помещаем в стейт\r\n    onCharLoaded = (char) => {\r\n        // Как только данные загрузятся, loading переходит в false и убирает спиннер\r\n        this.setState({\r\n            char,\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    onError = () => {\r\n        this.setState({\r\n            loading: false,\r\n            error: true\r\n        })\r\n    }\r\n\r\n    updateChar = () => {\r\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        this.onCharLoading();\r\n        this.marvelService\r\n            .getCharacter(id)\r\n            .then(this.onCharLoaded)\r\n            // Отлавливаем возможные ошибки\r\n            .catch(this.onError)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateChar();\r\n    }\r\n\r\n    // Крутим спиннер пока получаем данные\r\n    onCharLoading = () => {\r\n        this.setState({\r\n            loading: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { char, loading, error } = this.state;\r\n        // Выносим вычисления наверх / условный рендеринг\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = !(loading || error) ? <View char={char}/> : null;\r\n\r\n        return (\r\n            <div className=\"randomchar\">\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n                <div className=\"randomchar__static\">\r\n                    <p className=\"randomchar__title\">\r\n                        Random character for today!<br />\r\n                        Do you want to get to know him better?\r\n                    </p>\r\n                    <p className=\"randomchar__title\">\r\n                        Or choose another one\r\n                    </p>\r\n                    <button className=\"button button__main\" onClick={this.updateChar}>\r\n                        <div className=\"inner\">try it</div>\r\n                    </button>\r\n                    <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Рендерящий/простой компонент\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki } = char;\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} alt=\"Random character\" className={`randomchar__img ${!thumbnail || 'empty'}`} />\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import React, { Component } from 'react'\r\nimport './charItem.scss'\r\n\r\nexport class CharItem extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let imgStyle = { 'objectFit': 'cover' };\r\n        if (this.props.item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n            imgStyle = { 'objectFit': 'unset' };\r\n        }\r\n        return (\r\n            <li\r\n                className=\"char__item\"\r\n                key={this.props.item.id}\r\n                onClick={() => this.props.onCharSelected(this.props.item.id)}\r\n            >\r\n                <img src={this.props.item.thumbnail} alt={this.props.item.name} style={imgStyle} />\r\n                <div className=\"char__name\">{this.props.item.name}</div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default CharItem","import './charList.scss';\r\n\r\nimport MarvelService from '../../services/MarvelService';\r\nimport { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Spinner from '../spinner/Spinner';\r\nimport CharItem from '../charItem/CharItem';\r\n\r\nclass CharList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    state = {\r\n        charList: [],\r\n        // первичная загрузка\r\n        loading: true,\r\n        error: false,\r\n        newItemLoading: false,\r\n        // Чтобы не загрязнять экземпляр MarvelService создаём локальное состояние offset в этом компоненте (не увеличиваем в MarvelService)\r\n        offset: 210,\r\n        charEnded: false\r\n    }\r\n\r\n    marvelService = new MarvelService();\r\n\r\n    componentDidMount = () => {\r\n        this.onRequest();\r\n    }\r\n\r\n    // При клике на Load more\r\n    onRequest = (offset) => {\r\n        this.onCharListLoading();\r\n        this.marvelService\r\n            .getAllCharacters(offset)\r\n            .then(this.onCharListLoaded)\r\n            // Отлавливаем возможные ошибки\r\n            .catch(this.onError)\r\n    }\r\n\r\n    // Пока загружаются\r\n    onCharListLoading = () => {\r\n        this.setState({\r\n            newItemLoading: true\r\n        })\r\n    }\r\n\r\n    // Когда уже загрузились, помещаем в стейт\r\n    onCharListLoaded = (newCharList) => {\r\n        let ended = false;\r\n        // Делаем проверку, что в запросе не закончились персонажи и пришло 9, как нам нужно\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        // Как только данные загрузятся, loading переходит в false и убирает спиннер\r\n        // Т.к мы хотим дозагружать персонажей, важно сохранять предыдущий state, поэтому передаём в качестве callback\r\n        // Чтобы сформировать список из старого стейта + новый, нужно передать старый в setState\r\n        this.setState(({ offset, charList }) => ({\r\n            charList: [...charList, ...newCharList],\r\n            loading: false,\r\n            newItemLoading: false,\r\n            offset: offset + 9,\r\n            charEnded: ended\r\n        }))\r\n    }\r\n\r\n    onError = () => {\r\n        this.setState({\r\n            loading: false,\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { charList, loading, error, offset, newItemLoading, charEnded } = this.state;\r\n\r\n        const errorMessage = error ? <ErrorMessage /> : null;\r\n        const spinner = loading ? <Spinner /> : null;\r\n        const content = !(loading || error) ? charList.map((item) => <CharItem item={item} onCharSelected={this.props.onCharSelected} />) : null;\r\n\r\n        return (\r\n            <div className=\"char__list\">\r\n                <ul className=\"char__grid\">\r\n                    {errorMessage}\r\n                    {spinner}\r\n                    {content}\r\n                </ul>\r\n\r\n                <button\r\n                    className=\"button button__main button__long\"\r\n                    disabled={newItemLoading}\r\n                    // Если персонажи закончились, скрываем кнопку\r\n                    style={{ 'display': charEnded ? 'none' : 'block' }}\r\n                    // стрелочная функция чтобы передавать аргумент\r\n                    onClick={() => this.onRequest(offset)}\r\n                >\r\n                    <div className=\"inner\">load more</div>\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import './charInfo.scss';\r\nimport { Component } from 'react';\r\nimport MarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport Skeleton from '../skeleton/Skeleton';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass CharInfo extends Component {\r\n\r\n    state = {\r\n        char: null,\r\n        loading: false,\r\n        error: false,\r\n    }\r\n\r\n    marvelService = new MarvelService();\r\n\r\n    // Вызывается после создания компонента на странице, в этот момент можно выполнять запросы на сервер, подписываться, выполнять асинхр. \r\n    componentDidMount() {\r\n        this.updateChar();\r\n    }\r\n\r\n    // предыщие Props и State нужны для того, чтобы не получить бесконечный цикл, т.к setState вызывает ререндер\r\n    componentDidUpdate(prevProps, prevState) {\r\n        // Избегаем попадание в бесконечный цикл + не запускаем перерисовку, если пользователь кликает несколько раз по 1 персонажу\r\n        if (this.props.charId !== prevProps.charId) {\r\n            this.updateChar();\r\n        }\r\n    }\r\n\r\n    // Обновление компонента по клику\r\n    updateChar = () => {\r\n        const { charId } = this.props;\r\n        // Если id не приходит в props, ретурним\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        this.onCharLoading();\r\n        this.marvelService\r\n            .getCharacter(charId)\r\n            .then(this.onCharLoaded)\r\n            .catch(this.onError)\r\n    }\r\n\r\n    // Если персонаж загрузился, помещаем в стейт\r\n    onCharLoaded = (char) => {\r\n        // Как только данные загрузятся, loading переходит в false и убирает спиннер\r\n        this.setState({\r\n            char,\r\n            loading: false\r\n        })\r\n    }\r\n\r\n    onError = () => {\r\n        this.setState({\r\n            loading: false,\r\n            error: true\r\n        })\r\n    }\r\n\r\n    // Крутим спиннер пока получаем данные\r\n    onCharLoading = () => {\r\n        this.setState({\r\n            loading: true,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const { char, loading, error } = this.state;\r\n        // Условный рендеринг\r\n\r\n        // Если не загружен персонаж, не загрузка, не ошибка, то отображаем Skeleton в качестве заглушки\r\n        const skeleton = char || loading || error ? null : <Skeleton />\r\n        const errorMessage = error ? <ErrorMessage /> : null;\r\n        const spinner = loading ? <Spinner /> : null;\r\n        // Не загрузка, не ошибка, но есть персонаж !(!char)\r\n        const content = !(loading || error || !char) ? <View char={char} /> : null;\r\n        return (\r\n            <div className=\"char__info\">\r\n                {skeleton}\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Разделяем компонент выше на 2 компонента: View и State\r\nconst View = ({ char }) => {\r\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\r\n    let imgStyle = { 'objectFit': 'cover' };\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = { 'objectFit': 'contain' };\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {comics.length > 0 ? null : 'Unfortunately, there are no comics...'}\r\n                {\r\n                    // Список комиксов меняться не будет, поэтому можно индекс использовать в качестве key\r\n                    comics.map((item, i) => {\r\n                        // Если комиксов больше 9, выходим из цикла. Но на больших числах такое лучше не использовать, т.к каждый раз\r\n                        // идёт проверка и просто выход из условия.\r\n                        if (i > 9) return;\r\n                        return (\r\n                            <li ket={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default CharInfo;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import React, { Component } from 'react'\r\nimport ErrorMessage from '../errorMessage/ErrorMessage'\r\n\r\n\r\n// Error boundaries (только классовые компоненты, который оборачивает предохраняемый компонент)\r\n// Отлавливают ошибки только в методах render, жизненного цикла, constructor дочерних компонентов\r\n// ! Не ловят ошибки в обработчиках событий (напр. OnClick(() => {})), в асинхронном коде, в предохранителе, внутри серверного рендеринга\r\nexport class ErrorBoundary extends Component {\r\n    state = {\r\n        error: false,\r\n    }\r\n\r\n    // Занимается только обновлением состояния, что-то вроде setState для ошибок\r\n/*     static getDerivedStateFromError(error) {\r\n        return {error: true};\r\n    } */\r\n\r\n    // Принимает ошибку и объект компонента, в котором произошла ошибка\r\n    componentDidCatch(error, errorInfo) {\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage />\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary","import AppHeader from \"../appHeader/AppHeader\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\n\nimport decoration from '../../resources/img/vision.png';\nimport { Component } from \"react\";\nimport ErrorBoundary from \"../errorBoundary.js/ErrorBoundary\";\n\nclass App extends Component {\n    // Алгоритм подъема состояния (создаём базовое состояние, создаём метод, который через аргумент будет менять это состояние)\n    state = {\n        selectedChar: null,\n    }\n\n    onCharSelected = (id) => {\n        this.setState({\n            selectedChar: id\n        })\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <AppHeader />\n                <main>\n                    <ErrorBoundary>\n                        <RandomChar />\n                    </ErrorBoundary>\n\n                    <div className=\"char__content\">\n                        <ErrorBoundary>\n                            <CharList onCharSelected={this.onCharSelected} />\n                        </ErrorBoundary>\n                        <ErrorBoundary>\n                            <CharInfo charId={this.state.selectedChar} />\n                        </ErrorBoundary>\n\n                    </div>\n                    <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n                </main>\n            </div>\n        )\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\nimport './style/style.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}